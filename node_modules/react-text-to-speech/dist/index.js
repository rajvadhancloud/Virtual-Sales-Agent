var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useEffect, useState } from "react";
import { createPortal } from "react-dom";
import { useQueue, useSpeech, useVoices } from "./hooks.js";
import { HiMiniStop, HiVolumeOff, HiVolumeUp } from "./icons.js";
export function HighlightedText(_a) {
    var { id, children } = _a, props = __rest(_a, ["id", "children"]);
    const [loading, setLoading] = useState(true);
    useEffect(() => {
        setLoading(false);
    }, []);
    return (React.createElement("div", Object.assign({ id: `rtts-${id}` }, props), loading && (typeof children === "string" ? React.createElement("span", null, children) : children)));
}
export default function Speech(_a) {
    var { id, startBtn = React.createElement(HiVolumeUp, null), pauseBtn = React.createElement(HiVolumeOff, null), stopBtn = React.createElement(HiMiniStop, null), useStopOverPause = false, props = {}, children } = _a, hookProps = __rest(_a, ["id", "startBtn", "pauseBtn", "stopBtn", "useStopOverPause", "props", "children"]);
    const _b = useSpeech(hookProps), { Text } = _b, childrenOptions = __rest(_b, ["Text"]);
    const { isInQueue, start, pause, stop } = childrenOptions;
    const [highlightContainer, setHighlightContainer] = useState(null);
    useEffect(() => {
        if (hookProps.highlightText)
            setHighlightContainer(document.getElementById(`rtts-${id}`));
        else
            setHighlightContainer(null);
    }, [hookProps.highlightText]);
    return (React.createElement(React.Fragment, null,
        typeof children === "function" ? (children(childrenOptions)) : (React.createElement("div", Object.assign({ style: { display: "flex", columnGap: "1rem" } }, props),
            !isInQueue ? (React.createElement("span", { role: "button", onClick: start }, startBtn)) : useStopOverPause ? (React.createElement("span", { role: "button", onClick: stop }, stopBtn)) : (React.createElement("span", { role: "button", onClick: pause }, pauseBtn)),
            !useStopOverPause && stopBtn && (React.createElement("span", { role: "button", onClick: stop }, stopBtn)))),
        highlightContainer && createPortal(React.createElement(Text, null), highlightContainer)));
}
export { useQueue, useSpeech, useVoices };
